services:
  # フロントエンド（React/Next.js）
  frontend:
    container_name: VC_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      TZ: Asia/Tokyo
      NODE_ENV: development
    env_file:
      - ./frontend/.env.local
    volumes:
      - ./frontend:/frontend:delegated
      - node_modules:/frontend/node_modules

    command: bun run dev -p 4000
    ports:
      - '4000:4000'
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1G
    depends_on:
      backend:
        condition: service_started

  # # テスト時に使用
  # frontend-test:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.test
  #   volumes:
  #     - ./frontend:/frontend
  #     - node_modules:/frontend/node_modules
  #   environment:
  #     - NODE_ENV=test

  #バックエンド（Django）
  backend:
    container_name: VC_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python3 manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/backend:delegated
    ports:
      - '8000:8000'
    depends_on:
      db:
        condition: service_healthy # DBの健全性確認後に起動
    env_file:
      - ./backend/.env
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # DB(postgresql)
  db:
    container_name: VC_db
    image: postgres:16.2-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data:delegated
    env_file:
      - .env
    ports:
      - '5432:5432'
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5

# 永続化ボリュームの定義
volumes:
  postgres_data:
  node_modules:
